#!/usr/bin/env python

import rospy
from sensor_msgs.msg import Image
from face_detection.msg import Face
import cv2
from cv_bridge import CvBridge

import torch
import numpy as np
from facenet_pytorch import MTCNN, InceptionResnetV1

device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
mtcnn = MTCNN(image_size=(1280,720), margin=0, keep_all=True, device=device)
resnet = InceptionResnetV1(pretrained='vggface2').eval()


pub = rospy.Publisher('/face_detection/image_raw', Image)

def callback(data):
    bridge = CvBridge()
    img = bridge.imgmsg_to_cv2(data)
    faces, _ = mtcnn.detect(img)
    if faces is not None:
        for face in faces:
            face = face.astype(int)
            cv2.rectangle(img, (face[0],face[1]), (face[2],face[3]), (255,0,0),2)
    img_msg = bridge.cv2_to_imgmsg(img, encoding='rgb8')
    pub.publish(img_msg)
    
def listener():
    rospy.init_node('face_detection_node')
    rospy.Subscriber("/usb_cam/image_raw", Image, callback)
    rospy.spin()


if __name__ == '__main__':
    listener()